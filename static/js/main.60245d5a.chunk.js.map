{"version":3,"sources":["component/Count.js","App.js","reportWebVitals.js","index.js"],"names":["Count","props","state","txt","addCount","bind","ReactDOM","render","num","this","document","getElementById","console","log","newProps","newContext","setState","newState","onClick","oldProps","oldState","Component","App","mount","unMount","unmountComponentAtNode","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"wOAGqBA,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAETC,KAAK,GAET,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAND,E,4CASnB,WACIC,IAASC,OAAO,cAACP,EAAD,CAAOQ,IAAKC,KAAKR,MAAMO,IAAM,IAAOE,SAASC,eAAe,gB,+BAGhF,WACIC,QAAQC,IAAI,mC,uCAGhB,SAA0BC,EAASC,GAC/BH,QAAQC,IAAI,oCACZD,QAAQC,IAAI,WAAYC,GACrBA,EAASN,KAAO,IACfC,KAAKO,SAAS,CACVb,KAAI,M,mCAKhB,SAAsBW,EAASG,GAI3B,OAHAL,QAAQC,IAAI,oCACZD,QAAQC,IAAI,WAAYC,GACxBF,QAAQC,IAAI,WAAYI,IACjB,I,oBAIX,WAEI,OADAL,QAAQC,IAAI,sBAER,gCACI,iDACA,oCACI,mCAAOJ,KAAKP,MAAMC,IAAM,+BAAiC,0BAEzD,0CAAaM,KAAKR,MAAMO,OAH5B,MAKI,wBAAQU,QAAST,KAAKL,SAAtB,6B,gCAMhB,SAAmBe,EAAUC,GACzBR,QAAQC,IAAI,wBACZD,QAAQC,IAAI,WAAYM,GACxBP,QAAQC,IAAI,WAAYO,K,kCAG5B,WACIR,QAAQC,IAAI,uC,GA3DeQ,aCGdC,G,wDAEnB,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAQ,EAAKA,MAAMlB,KAAX,gBACb,EAAKmB,QAAU,EAAKA,QAAQnB,KAAb,gBAHC,E,yCAMlB,WAEEC,IAASC,OAAO,cAAC,EAAD,CAAOC,IAAK,IAAME,SAASC,eAAe,gB,qBAG5D,WACEL,IAASmB,uBAAuBf,SAASC,eAAe,gB,oBAI1D,WACE,OACE,sBAAKe,UAAU,YAAf,UACA,kDAEC,wBAAQR,QAAST,KAAKc,MAAtB,mBACA,wBAAQL,QAAST,KAAKe,QAASE,UAAU,IAAzC,+BAEA,qBAAKC,GAAG,qB,GA1BkBN,cCMlBO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdvB,IAASC,OACP,cAAC,IAAM8B,WAAP,UACE,cAAC,EAAD,MAEF3B,SAASC,eAAe,SAM1BiB,M","file":"static/js/main.60245d5a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nexport default class Count extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // initial state\r\n            txt: false\r\n        }; \r\n        this.addCount = this.addCount.bind(this);\r\n    }\r\n\r\n    addCount() {\r\n        ReactDOM.render(<Count num={this.props.num + 1} />, document.getElementById(\"countHere\"));\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"component did mount confirmed\");\r\n    }\r\n\r\n    componentWillReceiveProps(newProps,newContext) {\r\n        console.log(\"component will recieve new props\");\r\n        console.log(\"newProps\", newProps);\r\n        if(newProps.num >= 10) {\r\n            this.setState({\r\n                txt:true\r\n            });\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(newProps,newState) {\r\n        console.log(\"component should update or not ?\");\r\n        console.log(\"newProps\", newProps);\r\n        console.log(\"newState\", newState);\r\n        return true;\r\n        \r\n    }\r\n\r\n    render() {\r\n        console.log(\"component rendered\");\r\n        return(\r\n            <div>\r\n                <h3>Count Component</h3>\r\n                <article>\r\n                    <h1> { this.state.txt ? \"Hi welcome to lifecycle hook\" : \"Need some more count\"}</h1>\r\n\r\n                    <h4>Count = {this.props.num}</h4>   {/* default props call */}\r\n\r\n                    <button onClick={this.addCount}>Add + 1</button>\r\n                </article>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidUpdate(oldProps, oldState) {\r\n        console.log(\"component did update\");\r\n        console.log(\"oldProps\", oldProps);\r\n        console.log(\"oldState\", oldState);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        console.log(\"component will unmount executed\");\r\n    }\r\n}","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom';\n\nimport Count from './component/Count';\nimport './App.css';\n\nexport default class App extends Component {\n\n  constructor(props){\n    super(props);\n    this.mount = this.mount.bind(this);\n    this.unMount = this.unMount.bind(this);\n  }\n\n  mount(){\n    // default props\n    ReactDOM.render(<Count num={0}/>, document.getElementById(\"countHere\"));\n  }\n\n  unMount(){\n    ReactDOM.unmountComponentAtNode(document.getElementById(\"countHere\"));\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n      <h3>React Life Cycle</h3>\n      \n       <button onClick={this.mount}>Mount</button>\n       <button onClick={this.unMount} className=\"b\">UnMount Component</button>\n\n       <div id=\"countHere\"></div>\n      </div>\n    )\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}